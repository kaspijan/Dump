import numpy as np
import matplotlib.pyplot as plt


simps1 = [2.000000010824504, 2.000000000676474,\
          2.000000000017318, 2.000000000002641,\
          2.000000000001081, 2.000000000000066,\
          1.999999999999998, 1.999999999999995,\
          1.999999999999993, 2.000000000000014,\
          1.999999999999998, 1.999999999999987,\
          1.999999999999980, 1.999999999999942,\
          2.000000000000023, 2.000000000000049,\
          2.000000000000016, 1.999999999999810, 2.000000000000050]

simps2 = [0.142012708378766, 0.142012708346052,\
          0.142012708343927, 0.142012708343879,\
          0.142012708343874, 0.142012708343871,\
          0.142012708343871, 0.142012708343871,\
          0.142012708343871, 0.142012708343871,\
          0.142012708343872, 0.142012708343869,\
          0.142012708343871, 0.142012708343871,\
          0.142012708343872, 0.142012708343873,\
          0.142012708343866, 0.142012708343836, 0.142012708343891]

step = [100, 200, 500, 800, 1000, 2000, 5000, 7500, 10000, 35000, \
	50000, 70000, 100000, 500000, 1000000, 5000000, 10000000, 30000000, 60000000]

hmesh1 = [np.pi/n for n in step]
hmesh2 = [0.5/n for n in step]

def error(exact, result, h):
    er = []  #array of relative errors
    
    for r in result:  #calculates relative error
        er.append(np.log10( np.abs((exact - r)/exact) ) )
    
    plt.plot(np.log10(np.array(h)), er)
    plt.xlabel(r'$log_{10}(h)$')
    plt.ylabel('Relative error(log scale)')
     
    #plt.title('Relative error plot for integral ' + num + ' - ' + name + ' rule') 
    plt.show()

error(2, simps1, hmesh1)
error(np.exp(0.25)/2 - 0.5, simps2, hmesh2)
