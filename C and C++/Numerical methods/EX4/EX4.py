import numpy as np
import matplotlib.pyplot as plt

step = [10, 50, 70, 100, 200, 500, 800, 1000, 2000, 5000, 7500, 10000, 35000, \
	50000, 70000, 100000, 500000, 1000000, 5000000, 10000000, 30000000, 60000000]

hmesh = [1/n for n in step]  #step is number of steps, hmesh is size of step h


#C++ data - trap
trap1 = [0.501455127464826, 0.500058328168178, 0.500029760560037,\
         0.500014583010440,0.500003645813151,0.500000583332817,\
         0.500000227864504,0.500000145833301,0.500000036458332,\
         0.500000005833334,0.500000002592592,0.500000001458336,\
         0.500000000119042,0.500000000058334,0.500000000029767,\
         0.500000000014579,0.500000000000594,0.500000000000136,\
         0.500000000000035,0.499999999999986, 0.499999999999973, 0.499999999999786]

trap_prob = [#0.500000005833334,0.500000002592592,0.500000001458336,\
         #0.500000000119042,0.500000000058334,0.500000000029767,\
         0.500000000014579,0.500000000000594,0.500000000000136,\
         0.500000000000035,0.499999999999986, 0.499999999999973, 0.499999999999786]
hmesh_prob = [1/step[i] for i in range(15, len(step))]


#plt.plot(np.log10(np.array(hmesh_prob)), np.log10(np.array(trap_prob)))
#plt.show()

trap2 = [1.719713491389315, 1.718339104138158, 1.718311050839725,\
         1.718296147450418, 1.718285408211363, 1.718282401219617,\
         1.718282052193652, 1.718281971649196, 1.718281864256583,\
         1.718281834186650, 1.718281831004644, 1.718281829890947,\
         1.718281828575935, 1.718281828516322, 1.718281828488262,\
         1.718281828473365, 1.718281828459652, 1.718281828459131,\
         1.718281828459129, 1.718281828458976, 1.718281828459360, 1.718281828459140]

trap3=[0.776129581562080, 0.784567127774625, 0.784896394686614,\
       0.785104257944761, 0.785294236209882, 0.785371869250534,\
       0.785385171006119, 0.785388866727756, 0.785394876477991,\
       0.785397331857646, 0.785397710763588, 0.785397869402830,\
       0.785398118498282, 0.785398137101695, 0.785398147523189,\
       0.785398154100502, 0.785398162565888, 0.785398163103494,\
       0.785398163371163, 0.785398163388178, 0.785398163395654, 0.785398163396767]

    

#C++ data - simps
simps1 = [0.500012469860719,0.500000020636500,0.500000005375692,\
          0.500000001291194,0.500000000080722,0.500000000002067,\
          0.500000000000315,0.500000000000130,0.500000000000008,\
          0.500000000000001,0.500000000000000,0.499999999999999, \
          0.500000000000001,0.499999999999998,0.500000000000002,\
          0.499999999999996,0.499999999999995,0.499999999999987,\
          0.500000000000066,0.499999999999962, 0.499999999999914, 0.499999999999958]


simps2 = [1.718282781924823, 1.718281829986334, 1.718281828856620,\
          1.718281828554504, 1.718281828465012, 1.718281828459198,\
          1.718281828459070, 1.718281828459056, 1.718281828459044,\
          1.718281828459046, 1.718281828459040, 1.718281828459039,\
          1.718281828459037, 1.718281828459028, 1.718281828459035,\
          1.718281828459040, 1.718281828459082, 1.718281828459038,\
          1.718281828459184, 1.718281828458870, 1.718281828459245, 1.718281828458791]

simps3 = [0.781752039675810, 0.785073144457584, 0.785202003684353,\
          0.785283301334807, 0.785357562298256, 0.785387893375083,\
          0.785393089083809, 0.785394532553497, 0.785396879728070,\
          0.785397838656151, 0.785397986631187, 0.785398048584560,\
          0.785398145863199, 0.785398153128312, 0.785398157198148,\
          0.785398159766765, 0.785398163072749, 0.785398163282625,\
          0.785398163387157, 0.785398163393864, 0.785398163396803, 0.785398163397362]





###########
#relative error
def error(exact, result, n):
    er = []  #array of relative errors
    num = n[1]
    name=''
    if(n[0] == 't'):
        name = 'trapezoidal'
    else:
        name = 'Simpsons'
    for r in result:  #calculates relative error
        er.append(np.log10( np.abs((exact - r)/exact) ) )
    
    plt.plot(np.log10(np.array(hmesh)), er)
    plt.xlabel(r'$log_{10}(h)$')
    plt.ylabel('Relative error(log scale)')
    #string = 
    plt.title('Relative error plot for integral ' + num + ' - ' + name + ' rule') 
    plt.show()


error(0.5, trap1, 't1')
error(0.5, simps1, 's1')
error(np.e - 1, trap2, 't2')
error(np.e - 1, simps2, 's2')
error(np.pi/4, trap3, 't3')
error(np.pi/4, simps3, 's3')
